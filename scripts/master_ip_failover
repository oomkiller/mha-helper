#!/usr/bin/env python

# (c) 2013, Ovais Tariq <ovaistariq@gmail.com>
#
# This file is part of mha-helper
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from optparse import OptionParser
from lib.mha_ip_failover_helper import MHA_IP_failover_helper

def main():
    # parse comand line arguments
    parser = OptionParser()
    parser.add_option('--command', type='string')
    parser.add_option('--orig_master_host', type='string')
    parser.add_option('--orig_master_ip', type='string')
    parser.add_option('--orig_master_port', type='string')
    parser.add_option('--orig_master_ssh_port', type='string')
    parser.add_option('--new_master_host', type='string')
    parser.add_option('--new_master_ip', type='string')
    parser.add_option('--new_master_port', type='int')
    parser.add_option('--new_master_ssh_port', type='string')
    parser.add_option('--new_master_user', type='string')
    parser.add_option('--new_master_password', type='string')
    parser.add_option('--ssh_user', type='string')
    parser.add_option('--ssh_options', type='string')

    (options, args) = parser.parse_args()

    # do the actual work
    exit_code = 1

    if options.command is None:
        sys.exit(exit_code)

    mha_ip_failover_helper = MHA_IP_failover_helper()

    if options.command == 'stop':
        if (options.orig_master_ip is not None and
                options.ssh_options is not None):
            exit_code = mha_ip_failover_helper.execute_stop_command(
                    orig_master_host=options.orig_master_host,
                    orig_master_ip=options.orig_master_ip,
                    ssh_user=options.ssh_user, 
                    ssh_port=options.orig_master_ssh_port,
                    ssh_options=options.ssh_options)

    if options.command == 'stopssh':
        if (options.orig_master_ip is not None and
                options.ssh_user is not None and
                options.ssh_options is not None):
            exit_code = mha_ip_failover_helper.execute_stopssh_command(
                    orig_master_host=options.orig_master_host,
                    orig_master_ip=options.orig_master_ip,
                    ssh_user=options.ssh_user,
                    ssh_port=options.orig_master_ssh_port,
                    ssh_options=options.ssh_options)
    elif options.command == 'start':
        if (options.orig_master_ip is not None and 
                options.new_master_ip is not None and
                options.ssh_user is not None and
                options.ssh_options is not None):
            exit_code = mha_ip_failover_helper.execute_start_command(
                    orig_master_host=options.orig_master_host,
                    orig_master_ip=options.orig_master_ip,
                    new_master_host=options.new_master_host,
                    new_master_ip=options.new_master_ip,
                    new_master_port=options.new_master_port,
                    ssh_user=options.ssh_user,
                    ssh_port=options.new_master_ssh_port,
                    ssh_options=options.ssh_options)
    elif options.command == 'status':
        if (options.orig_master_ip is not None and
                options.ssh_user is not None and
                options.ssh_options is not None):
            exit_code = mha_ip_failover_helper.execute_status_command(
                    orig_master_host=options.orig_master_host,
                    orig_master_ip=options.orig_master_ip,
                    ssh_user=options.ssh_user,
                    ssh_port=options.orig_master_ssh_port,
                    ssh_options=options.ssh_options)

    # exit the script with the appropriate code
    # if script exits with a 0 status code, MHA continues with the failover
    sys.exit(exit_code)

if __name__ == "__main__":
    main()
